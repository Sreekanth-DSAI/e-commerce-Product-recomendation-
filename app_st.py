"""
Streamlit Application: Personalized Product Recommendation System

This Streamlit application provides personalized product recommendations using a fine-tuned 
Large Language Model (LLM) hosted locally. The user can enter a product or feature theyâ€™re 
interested in, and the model will generate tailored recommendations based on the input.

Model and Tokenizer:
The application loads a fine-tuned transformer model and tokenizer (e.g., GPT) from a 
local directory named "fine_tuned_model". The model is expected to be trained on e-commerce 
data to make meaningful recommendations based on product preferences.
"""

# Import necessary libraries
import streamlit as st
import pandas as pd
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

# Load the fine-tuned tokenizer and model from the local directory
tokenizer = AutoTokenizer.from_pretrained("fine_tuned_model")
model = AutoModelForCausalLM.from_pretrained("fine_tuned_model")

def get_recommendations(user_input):
    """
    Generates product recommendations based on user input using a fine-tuned LLM.

    Args:
        user_input (str): A string describing the product or feature of interest.

    Returns:
        list of str: A list of product recommendations generated by the model.
    """
    # Tokenize the user input to prepare for model input
    inputs = tokenizer.encode(user_input, return_tensors="pt")
    
    # Generate recommendations with a maximum sequence length of 100 tokens
    outputs = model.generate(inputs, max_length=100, num_return_sequences=1)
    
    # Decode the generated text and split into individual recommendations
    recommendations = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return recommendations.split("\n")

# Display the title and description for the application
st.title("Personalized Product Recommendation System")
st.write("""
    This application provides personalized product recommendations based on your recent activity
    and preferences. Simply select your preferences below to see tailored product recommendations!
""")

# User input section
st.header("Select Your Preferences")
user_input = st.text_input("Enter a product or feature you're interested in (e.g., 'jumper cables', 'power bank')")

# Recommendation button and output
if st.button("Get Recommendations"):
    if user_input:
        # Generate recommendations based on the user's input
        recommendations = get_recommendations(user_input)
        
        # Display the generated recommendations
        if recommendations:
            st.subheader("Recommended Products for You")
            for recommendation in recommendations:
                st.write(f"- {recommendation}")
        else:
            # Display message if no recommendations are found
            st.write("No recommendations found. Please try a different input.")
    else:
        # Prompt user to enter input if the input box is empty
        st.write("Please enter a product or feature to receive recommendations.")

# Display sample data to showcase available products
sample_products = [
    {"product_id": 1, "name": "Jumper Cables - 16 ft", "category": "Automotive"},
    {"product_id": 2, "name": "Portable Car Battery Charger", "category": "Automotive"},
    {"product_id": 3, "name": "LED Headlamp", "category": "Outdoor"},
    {"product_id": 4, "name": "Portable Power Bank", "category": "Electronics"},
]

# Display the sample product data as a table
st.header("Available Products (Sample Data)")
sample_df = pd.DataFrame(sample_products)
st.table(sample_df)
